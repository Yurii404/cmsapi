# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:latest
        options: --privileged
        
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    # Install Docker Compose
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build
        
    - name: Test with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: test
        
    - name: Upload Artifacts  
      uses: actions/upload-artifact@v3
      with:
        name: Package
        path: build/libs

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Pull MySQL image
      run: docker pull mysql:8.0

    - name: Log Docker images
      run: docker images

    - name: Build, tag, and push the images to Amazon ECR
      id: build-images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
        IMAGE_TAG: latest
      run: |
        # Build and tag the Docker images
        docker-compose build
    
        # Authenticate Docker with AWS ECR
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
    
        # Tag the images with ECR repository URI
        docker tag mysql:8.0 $ECR_REGISTRY/$ECR_REPOSITORY:mysql-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:mysql-latest
    
        docker tag config-service:latest $ECR_REGISTRY/$ECR_REPOSITORY:config-service-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:config-service-latest
        
        docker tag discovery-service:latest $ECR_REGISTRY/$ECR_REPOSITORY:discovery-service-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:discovery-service-latest
        
        docker tag api-gateway:latest $ECR_REGISTRY/$ECR_REPOSITORY:api-gateway-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:api-gateway-latest
        
        docker tag business-service:latest $ECR_REGISTRY/$ECR_REPOSITORY:business-service-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:business-service-latest
        
        docker tag auth-service:latest $ECR_REGISTRY/$ECR_REPOSITORY:auth-service-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:auth-service-latest

    - name: Deploy to ECS
      run:
        aws ecs update-service --cluster <cmsapiapp-cluster> --service <config-service> --force-new-deployment
        aws ecs update-service --cluster <cmsapiapp-cluster> --service <discovery-service> --force-new-deployment
        aws ecs update-service --cluster <cmsapiapp-cluster> --service <api-gateway> --force-new-deployment
        aws ecs update-service --cluster <cmsapiapp-cluster> --service <business-service> --force-new-deployment
        aws ecs update-service --cluster <cmsapiapp-cluster> --service <auth-service> --force-new-deployment

    - name: Log Docker images
      run: docker images
      
    - name: Logout of Amazon ECR
      run: docker logout ${{ steps.login-ecr.outputs.registry }}


